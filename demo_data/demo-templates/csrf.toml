format = "templates/v2"
id = "d6919eb0-0e69-4968-ba99-4c8a8ee108a9"
tags = [
    "web",
]
images = []

[[translations]]
id = "9a165150-d953-47e2-8857-ce40443c7ef9"
is_main = true
language = "en-US"
status = "finished"

[translations.data]
title = "Cross-Site Request Forgery (CSRF)"
cvss = "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N"
summary = """
The web application was vulnerable to Cross-Site Request Forgery (CSRF). 
CSRF is an attack that causes users to unknowingly send an HTTP request to a web application to which they are currently authenticated. 
Attackers can thereby partially bypass a web browser's same-origin policy and perform state-changing actions in the context of an affected user. 
Depending on the nature of the action, the attacker can gain complete control over the user's account. 
If the user account is administrative, CSRF may also be able to compromise the entire web application.
"""
description = """
We identified a CSRF vulnerability in the web application, allowing them to perform actions in the context of another user.

**TODO: technical description**

Cross-site request forgery (CSRF) is a web security vulnerability in which an attacker can trick an authenticated user into unknowingly sending a state-changing HTTP request to the vulnerable web application. 
In CSRF, an attacker assumes the victim's identity and access privileges to perform unwanted actions (e.g., change email address) on their behalf. 
Without appropriate CSRF protection, the web application has no way to distinguish between a request prepared by the attacker and a legitimate request from the victim.

Several prerequisites must be in place for a CSRF attack to take place. 
First, there must be an action in the web application that is relevant to an attacker and makes sense to exploit. 
For example, this could be a privileged action, such as changing a user's access permissions or changing a password. 
Another requirement is that there is no other mechanism besides cookie-based authentication to distinguish HTTP requests from different users. 
If the user is authenticated and thus has a valid session cookie, the web application thus has no way to distinguish between a malicious, subverted request from the attacker and a legitimate request from the victim. 
Last, it must be ensured that actions do not require specific parameters whose values an attacker cannot determine or predict. 
For example, if a user is asked to change his password, the function is not vulnerable if an attacker needs to know the value of the existing password.

A common way to exploit CSRF vulnerabilities is through phishing emails. 
An attacker does this by preparing malicious links with the intention of foisting a state-changing request on the victim. 
The attacker then distributes the malicious links to victims via email. 
When a user opens the link in a web browser and is authenticated to it, the request is sent to the vulnerable web application. 
If successful, the attack causes an action with the victim's identity and privilege level.
"""
recommendation = """
* Check if the framework has built-in CSRF protection and use it. If not, ensure that all state-changing requests contain a randomly generated CSRF token with high entropy. Also ensure that CSRF tokens are properly validated on the backend.
* Consider various additional security measures:
    * For example, set the SameSite attribute for session cookies. Web browsers decide whether to include cookies in cross-site requests based on this attribute.
    * Use Custom Request Headers. By default, the browser's same-origin policy restricts JavaScript from submitting cross-site requests with custom request headers.
    * For highly sensitive actions, user interactions such as CAPTCHAs, one-time tokens, re-authentication, etc. can also be considered as additional CSRF protection. 
* Detailed information and assistance on how to prevent CSRF vulnerabilities can be found in the linked Cross-Site Request Forgery Cheat Sheet from OWASP.
"""
short_recommendation = "Make sure that randomly generated CSRF tokens with high entropy are included in all state-changing HTTP requests and validated in the backend."
references = [
    "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
]
affected_components = []
