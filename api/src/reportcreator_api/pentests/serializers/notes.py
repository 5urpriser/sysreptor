from rest_framework import serializers
from django.db import transaction
from django.db.models import F

from reportcreator_api.pentests.models import ProjectNotebookPage, UserNotebookPage
from reportcreator_api.pentests.serializers.common import LockInfoSerializer
from reportcreator_api.users.serializers import RelatedUserSerializer


class NotebookPageSerializerBase(serializers.ModelSerializer):
    id = serializers.UUIDField(source='note_id', read_only=True)
    lock_info = LockInfoSerializer()
    title = serializers.CharField(required=False, allow_blank=True)
    text = serializers.CharField(required=False, allow_blank=True, trim_whitespace=False)
    parent = serializers.UUIDField(source='parent.note_id', allow_null=True, required=False)

    class Meta:
        fields = [
            'id', 'created', 'updated', 'lock_info',
            'title', 'text', 'checked', 'icon_emoji', 'status_emoji',
            'order', 'parent',
        ]
        extra_kwargs = {
            'parent': {'read_only': True},
            'order': {'read_only': True},
        }

    def update(self, instance, validated_data):
        validated_data.pop('parent', None)
        return super().update(instance, validated_data)


class ProjectNotebookPageSerializer(NotebookPageSerializerBase, serializers.ModelSerializer):
    assignee = RelatedUserSerializer(required=False, allow_null=True)

    class Meta(NotebookPageSerializerBase.Meta):
        model = ProjectNotebookPage
        fields = NotebookPageSerializerBase.Meta.fields + ['assignee']


class UserNotebookPageSerializer(NotebookPageSerializerBase, serializers.ModelSerializer):
    class Meta(NotebookPageSerializerBase.Meta):
        model = UserNotebookPage


class NotebookPageCreateSerializerMixin:
    def get_extra_kwargs(self):
        return super().get_extra_kwargs() | {
            'parent': {'read_only': False, 'required': False},
            'order': {'read_only': False, 'required': False, 'allow_null': True},
        }

    def get_notebook_object(self):
        return None
    
    def validate_parent(self, value):
        if value:
            parent = self.Meta.model.objects \
                .filter(**self.get_notebook_object()) \
                .filter(note_id=value) \
                .first()
            if not parent:
                raise serializers.ValidationError('Invalid note id')
            return parent
        return value

    @transaction.atomic()
    def create(self, validated_data):
        validated_data['parent'] = validated_data.get('parent', {}).get('note_id')

        if validated_data.get('order'):
            self.Meta.model.objects \
                .filter(**self.get_notebook_object()) \
                .filter(parent=validated_data.get('parent')) \
                .filter(order__gte=validated_data.get('order')) \
                .update(order=F('order') + 1)
        else:
            validated_data.pop('order', None)

        return super().create(validated_data | self.get_notebook_object())


class ProjectNotebookPageCreateSerializer(NotebookPageCreateSerializerMixin, ProjectNotebookPageSerializer):
    def get_notebook_object(self):
        return {'project': self.context['project']}


class UserNotebookPageCreateSerializer(NotebookPageCreateSerializerMixin, UserNotebookPageSerializer):
    def get_notebook_object(self):
        return {'user': self.context['user']}


class NotebookPageSortSerializerBase(serializers.ModelSerializer):
    id = serializers.UUIDField(source='note_id')
    parent = serializers.UUIDField(source='parent.note_id', allow_null=True)

    class Meta:
        fields = ['id', 'parent', 'order']
    
    def validate_id(self, value):
        if not next(filter(lambda n: n.note_id == value, self.parent.instance), None):
            raise serializers.ValidationError('Invalid note id')
        return value
        
    def validate_parent(self, value):
        parent = next(filter(lambda n: n.note_id == value, self.parent.instance), None)
        if value is not None and not parent:
            raise serializers.ValidationError('Invalid note id')
        return parent
    

class ProjectNotebookPageSortSerializer(NotebookPageSortSerializerBase, serializers.ModelSerializer):
    class Meta(NotebookPageSortSerializerBase.Meta):
        model = ProjectNotebookPage


class UserNotebookPageSortSerializer(NotebookPageSortSerializerBase, serializers.ModelSerializer):
    class Meta(NotebookPageSortSerializerBase.Meta):
        model = UserNotebookPage    


class NotebookPageSortListSerializerBase(serializers.ListSerializer):
    def update(self, instance, validated_data):
        # Update values
        missing_notes = []
        for note in instance:
            if data := next(filter(lambda d: note.note_id == d.get('note_id'), validated_data), None):
                note.parent = data.get('parent', {}).get('note_id')
                note.order = data.get('order')
            else:
                missing_notes.append(note)
        
        self.child.Meta.model.objects.check_parent_and_order(instance, missing_notes)
        self.child.Meta.model.objects.bulk_update(instance, ['parent_id', 'order'])
        return instance


class ProjectNotebookPageSortListSerializer(NotebookPageSortListSerializerBase):
    child = ProjectNotebookPageSortSerializer()


class UserNotebookPageSortListSerializer(NotebookPageSortListSerializerBase):
    child = UserNotebookPageSortSerializer()


class ExportPdfOptionsSerializer(serializers.Serializer):
    pass