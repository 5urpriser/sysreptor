import contextlib
from django.db import models
from django.core.serializers.json import DjangoJSONEncoder
from asgiref.local import Local

from reportcreator_api.archive.crypto.fields import EncryptedField
from reportcreator_api.utils.models import BaseModel


class OperationalTransformationEventType(models.TextChoices):
    CREATE = 'collab.create', 'Create'
    UPDATE_KEY = 'collab.update_key', 'Update Key'
    UPDATE_TEXT = 'collab.update_text', 'Update Text'
    DELETE = 'collab.delete', 'Delete'
    SORT = 'collab.sort', 'Sort'


class OperationalTransformationEvent(BaseModel):
    related_id = models.UUIDField(db_index=True)
    path = models.TextField(db_index=True)
    type = models.CharField(choices=OperationalTransformationEventType.choices, max_length=30, db_index=True)
    version = models.FloatField(db_index=True)
    data = EncryptedField(base_field=models.JSONField(encoder=DjangoJSONEncoder, default=dict))


collab_context_store = Local()


@contextlib.contextmanager
def collab_context(**kwargs):
    restore_map = {}
    try:
        for k, v in kwargs.items():
            if hasattr(collab_context_store, k):
                restore_map[k] = getattr(collab_context_store, k)
            setattr(collab_context_store, k, v)
        
        yield
    finally:
        for k, v in kwargs.items():
            if k in restore_map:
                setattr(collab_context_store, k, restore_map[k])
            else:
                delattr(collab_context_store, k)

