from uuid import uuid4
from django.db import models
from simple_history.models import HistoricalRecords

from reportcreator_api.archive.crypto.fields import EncryptedField
from reportcreator_api.pentests.models.common import LockableMixin
from reportcreator_api.users.models import PentestUser
from reportcreator_api.utils.models import BaseModel
from reportcreator_api.pentests import querysets


class NotebookPageMixin(LockableMixin):
    class Meta:
        abstract = True

    note_id = models.UUIDField(default=uuid4, db_index=True, editable=False)
    title = EncryptedField(base_field=models.TextField(default=''))
    text = EncryptedField(base_field=models.TextField(default=''))
    checked = models.BooleanField(null=True, blank=True)
    icon_emoji = models.CharField(max_length=32, null=True, blank=True)
    status_emoji = models.CharField(max_length=32, null=True, blank=True)

    parent = models.ForeignKey(to='self', on_delete=models.CASCADE, null=True, blank=True)
    order = models.PositiveIntegerField()


class ProjectNotebookPage(NotebookPageMixin, BaseModel):
    assignee = models.ForeignKey(to=PentestUser, on_delete=models.SET_NULL, null=True, blank=True)
    project = models.ForeignKey(to='PentestProject', on_delete=models.CASCADE, related_name='notes')

    history = HistoricalRecords()
    objects = querysets.ProjectNotebookPageManager()

    class Meta:
        unique_together = [('project', 'note_id')]


class UserNotebookPage(NotebookPageMixin, BaseModel):
    user = models.ForeignKey(to=PentestUser, on_delete=models.CASCADE, related_name='notes')

    objects = querysets.UserNotebookPageManager()

    class Meta:
        unique_together = [('user', 'note_id')]
