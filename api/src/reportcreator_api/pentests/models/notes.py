from uuid import uuid4

from django.db import models
from django.utils import timezone

from reportcreator_api.archive.crypto.fields import EncryptedField
from reportcreator_api.pentests import querysets
from reportcreator_api.users.models import PentestUser
from reportcreator_api.utils.history import HistoricalRecords
from reportcreator_api.utils.models import BaseModel


class NotebookPageMixin(models.Model):
    note_id = models.UUIDField(default=uuid4, db_index=True, editable=False)
    title = EncryptedField(base_field=models.TextField(default=''))
    text = EncryptedField(base_field=models.TextField(default=''))
    checked = models.BooleanField(null=True, blank=True)
    icon_emoji = models.CharField(max_length=32, null=True, blank=True)

    parent = models.ForeignKey(to='self', on_delete=models.CASCADE, null=True, blank=True)
    order = models.PositiveIntegerField()

    class Meta:
        abstract = True

    def __str__(self):
        return self.title

    def is_file_referenced(self, f) -> bool:
        return f.name in self.text or f.name in self.title


class ProjectNotebookPage(NotebookPageMixin, BaseModel):
    assignee = models.ForeignKey(to=PentestUser, on_delete=models.SET_NULL, null=True, blank=True)
    project = models.ForeignKey(to='PentestProject', on_delete=models.CASCADE, related_name='notes')

    history = HistoricalRecords()
    objects = querysets.ProjectNotebookPageManager()

    class Meta:
        unique_together = [('project', 'note_id')]


class UserNotebookPage(NotebookPageMixin, BaseModel):
    user = models.ForeignKey(to=PentestUser, on_delete=models.CASCADE, related_name='notes')

    objects = querysets.UserNotebookPageManager()

    class Meta:
        unique_together = [('user', 'note_id')]


class ProjectNoteShareInfo(BaseModel):
    note = models.ForeignKey(to=ProjectNotebookPage, on_delete=models.CASCADE, related_name='shareinfos')
    expire_date = models.DateField(db_index=True)
    is_revoked = models.BooleanField(default=False, db_index=True)
    password = EncryptedField(base_field=models.CharField(max_length=255, null=True, blank=True), null=True, blank=True)
    permissions_write = models.BooleanField(default=False)
    shared_by = models.ForeignKey(to=PentestUser, on_delete=models.SET_NULL, null=True, blank=True)
    comment = models.TextField(null=True, blank=True)

    objects = querysets.ProjectNoteShareInfoManager()

    @property
    def is_active(self) -> bool:
        return self.expire_date >= timezone.now().date() and not self.is_revoked


# TODO: document sharing
# * general:
#   * share notes with pentest customers (public access)
#   * share top-level note, all children are also shared
#   * guests can read, write and upload notes (not: delete, create)
#   * set password, expire date, read/write permissions for shared notes
#   * guests can create/delete child notes: yes
# * [ ] model
#   * [x] ProjectNoteShareInfo
#       * note: foreign key
#       * expire_date
#       * password (optional)
#       * permissions_write
#       * shared_by: user
#   * [ ] UploadedFile
#       * uploaded_in_share: ???
# * [x] migration
# * [x] api
#   * [x] management
#       * [x] /api/v1/pentestprojects/<id>/notes/<id>/shareinfo/
#       * [x] ProjectNoteSerializer
#           * is_shared ???
#       * [x] ProjectNoteShareInfoSerializer
#       * [x] permissions
#       * [x] update ShareInfo: is_revoked, expire_date, permissions_write, password
#   * [x] public
#       * [x] /api/v1/sharednotes/<id>/
#       * [x] /api/v1/sharednotes/<id>/auth/
#           * POST: password
#           * get/update sharesession cookie => add shareId to cookie
#       * [x] /api/v1/sharednotes/<id>/{images,files,upload}/
#           * [x] permissions: upload: can write
#           * [x] permissions: read: password entered
#       * [x] /ws/sharednotes/<id>/
# * [x] collab
#   * [x] consumer_base
#       * [x] handle user=None
#       * [x] DB query in related_id
#       * [x] DB query in filter_path or collab_event
#       * [x] fallback: filter events
#   * [x] public
#       * [x] SharedNotesConsumer: similar to ProjectNotesConsumer
#       * [x] permissions: shareId in session; not expires; read/write based on ProjectNoteShareInfo
#       * [x] events: notes created, updated, deleted of child notes
# * [x] import/export: do not export share information
# * [ ] frontend
#   * [ ] notes list:
#       * [ ] show shared icon
#   * [ ] note detail:
#       * [ ] 3-dot menu: share
#       * [ ] dialog: list all shares of note, create delete share
#           * [ ] copy public link, show password, show/update expire date
#           * [ ] revoke share
#   * [ ] public page:
#       * [ ] password input if share_info.password_required
#       * [ ] subtree of shared note
#   * [ ] handle collab.client.user=None
# * [ ] other
#   * [x] update OpenAPI schema
#   * [ ] fix typescript errors
# * [ ] tests:
#   * [x] test_api
#   * [x] test_share
#       * [x] test some note shared, others not shared
#           * [x] only access shared notes + subnotes, not other note+subnotes
#           * [x] only access files referenced in shared notes, not in other notes, not in findings/sections
#       * [x] test permissions
#           * [x] expired: denied
#           * [x] revoked: denied
#           * [x] readonly project: never write
#           * [x] readonly ShareInfo: never write
#           * [x] writeable ShareInfo: allow write
#       * [x] test create top-level note (parent=None) => fail
#       * [x] test create child note of non-shared note => fail
#       * [x] test create child note => pass
#       * [x] test delete child note => pass
#       * [x] test delete root note => fail
#       * [x] test image/file permissions
#           * [x] access images/files referenced in share note (or childnote) text => pass
#           * [x] access images/files referenced in finding => fail
#           * [x] access images/files not referenced anywhere => fail
#       * [x] test password auth
#   * [x] test_collab
#       * [x] no events received for non-shared notes of same project
#       * [x] non-shared notes not in init message
#       * [x] events received for shared notes and child notes
#       * [x] public user can read/write (based on settings)
#       * [x] public user cannot update non-shared notes
#   * [x] test_auth: with/without password
#   * [ ] frontend:
#       * [ ] test shareinfo.note.parent != None => note still at top level
#       * [ ] test shared childnote moved toplevel => removed from note list
