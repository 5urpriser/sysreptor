import logging

from asgiref.sync import async_to_sync
from channels.db import database_sync_to_async
from channels.layers import get_channel_layer
from django.core.exceptions import ValidationError
from django.db import models, transaction
from django.db.models import Prefetch

from reportcreator_api.pentests.collab.consumer_base import GenericCollabMixin, WebsocketConsumerBase
from reportcreator_api.pentests.customfields.types import FieldDataType
from reportcreator_api.pentests.customfields.utils import (
    get_field_value_and_definition,
    get_value_at_path,
    set_value_at_path,
)
from reportcreator_api.pentests.models import (
    CollabEvent,
    CollabEventType,
    PentestFinding,
    PentestProject,
    ProjectNotebookPage,
    ReportSection,
    UserNotebookPage,
    collab_context,
)
from reportcreator_api.pentests.serializers.notes import ProjectNotebookPageSerializer, UserNotebookPageSerializer
from reportcreator_api.pentests.serializers.project import PentestFindingSerializer, ReportSectionSerializer
from reportcreator_api.utils.utils import is_uuid

log = logging.getLogger(__name__)


class NotesConsumerBase(GenericCollabMixin, WebsocketConsumerBase):
    serializer_class = None
    initial_path = 'notes'

    @property
    def related_id(self):
        raise NotImplementedError()

    def get_notes_queryset(self):
        raise NotImplementedError()

    def get_serializer(self, *args, **kwargs):
        return self.serializer_class(*args, **kwargs)

    @database_sync_to_async
    def get_initial_message(self):
        notes = list(self.get_notes_queryset()
            .order_by('created'))
        return {
            'type': CollabEventType.INIT,
            'client_id': self.client_id,
            'client_color': self.client_color,
            'version': max(n.updated.timestamp() for n in notes) if notes else 0,
            'data': {
                'notes': {n['id']: n for n in self.get_serializer(notes, many=True).data},
            },
            'clients': self.get_client_infos(),
            'permissions': {
                'read': True,
                'write': self.has_permission(action='write'),
            },
        }

    async def receive_json(self, content, **kwargs):
        event = None
        match content.get('type'):
            case CollabEventType.UPDATE_KEY:
                event = await self.collab_update_key(content)
            case CollabEventType.UPDATE_TEXT:
                event = await self.collab_update_text(content)
            case CollabEventType.AWARENESS:
                event = await self.collab_update_awareness(content)
            case _:
                raise ValueError(f'Invalid message type: {content.get("type")}')
        await self.send_colllab_event(event)

    def filter_path(self, obj_or_qs):
        if isinstance(obj_or_qs, models.QuerySet):
            return obj_or_qs.filter(path__startswith='notes')
        elif isinstance(obj_or_qs, dict) and (obj_or_qs.get('path') or '').startswith('notes'):
            return obj_or_qs
        return None

    def get_note_for_update(self, path, valid_paths=None):
        if not isinstance(path, str):
            raise ValidationError('Invalid path')
        path_parts = path.split('.')
        if len(path_parts) < 3 or path_parts[0] != 'notes' or not is_uuid(path_parts[1]) or not (not valid_paths or '.'.join(path_parts[2:]) in valid_paths):
            raise ValidationError('Invalid path')
        note = self.get_notes_queryset() \
            .filter(note_id=path_parts[1]) \
            .select_for_update(of=['self'], no_key=True) \
            .first()
        if not note:
            raise ValidationError('Invalid path: ID not found')
        return note, path_parts[2:], None

    def get_object_for_update(self, content):
        match content.get('type'):
            case CollabEventType.UPDATE_KEY:
                valid_paths = {k for k, f in self.get_serializer().fields.items() if not f.read_only} - {'title', 'text'}
            case CollabEventType.UPDATE_TEXT:
                valid_paths=['title', 'text']
            case _:
                raise ValidationError('Invalid collab event type')
        return self.get_note_for_update(path=content.get('path'), valid_paths=valid_paths)

    def perform_update_key(self, obj, path, definition, value):
        serializer = self.get_serializer(instance=obj, data={path[0]: value}, partial=True)
        serializer.is_valid(raise_exception=True)
        return serializer.save()

    def perform_update_text(self, obj, path, definition, changes):
        setattr(obj, path[0], changes.apply(getattr(obj, path[0]) or ''))
        obj.save()
        return obj


class ProjectNotesConsumer(NotesConsumerBase):
    serializer_class = ProjectNotebookPageSerializer

    @property
    def related_id(self):
        return self.scope['url_route']['kwargs']['project_pk']

    @property
    def group_name(self) -> str:
        return f'project_{self.related_id}'

    def get_project(self):
        return PentestProject.objects \
            .only_permitted(self.scope['user']) \
            .filter(id=self.related_id) \
            .first()

    def has_permission(self, action=None, **kwargs):
        user = self.scope['user']
        project = self.get_project()
        if not user or user.is_anonymous or not project:
            return False
        if action in ['connect', 'read']:
            return True
        return not project.readonly

    def get_notes_queryset(self):
        return ProjectNotebookPage.objects \
            .filter(project_id=self.related_id) \
            .select_related('parent', 'assignee')


class UserNotesConsumer(NotesConsumerBase):
    serializer_class = UserNotebookPageSerializer

    @property
    def related_id(self):
        user_id = self.scope['url_route']['kwargs']['pentestuser_pk']
        if user_id == 'self':
            return self.scope['user'].id
        else:
            return user_id

    @property
    def group_name(self) -> str:
        return f'user_{self.related_id}'

    def has_permission(self, **kwargs):
        user = self.scope['user']
        if not user or user.is_anonymous:
            return False
        if str(user.id) == str(self.related_id):
            return True
        return False

    def get_notes_queryset(self):
        return UserNotebookPage.objects \
            .filter(user_id=self.related_id) \
            .select_related('parent')


class ProjectReportingConsumer(GenericCollabMixin, WebsocketConsumerBase):
    @property
    def related_id(self):
        return self.scope['url_route']['kwargs']['project_pk']

    @property
    def group_name(self) -> str:
        return f'project_{self.related_id}'

    def has_permission(self, action=None, **kwargs):
        user = self.scope['user']
        project = self.get_project()
        if not user or user.is_anonymous or not project:
            return False
        if action in ['connect', 'read']:
            return True
        return not project.readonly

    def get_project(self, prefetch_related=False):
        qs = PentestProject.objects \
            .only_permitted(self.scope['user']) \
            .filter(id=self.related_id)
        if prefetch_related:
            qs = qs \
                .select_related('project_type') \
                .prefetch_related(
                    Prefetch('sections', queryset=ReportSection.objects.select_related('assignee')),
                    Prefetch('findings', queryset=PentestFinding.objects.select_related('assignee')),
                )
        return qs.first()

    def filter_path(self, qs_or_obj):
        if isinstance(qs_or_obj, models.QuerySet):
            return qs_or_obj.exclude(path__startswith='notes')
        elif isinstance(qs_or_obj, dict) and not (qs_or_obj.get('path') or '').startswith('notes'):
            return qs_or_obj
        return False

    @database_sync_to_async
    def get_initial_message(self):
        project = self.get_project(prefetch_related=True)
        if not project:
            return None
        sections = list(project.sections.all())
        findings = list(project.findings.all())
        return {
            'type': CollabEventType.INIT,
            'client_id': self.client_id,
            'client_color': self.client_color,
            'version': max([o.updated.timestamp() for o in sections + findings + [project]]),
            'data': {
                'project': {
                    'id': project.id,
                    'project_type': project.project_type.id,
                    'override_finding_order': project.override_finding_order,
                },
                'sections': {s['id']: s for s in ReportSectionSerializer(sections, many=True).data},
                'findings': {f['id']: f for f in PentestFindingSerializer(findings, many=True).data},
            },
            'clients': self.get_client_infos(),
            'permissions': {
                'read': True,
                'write': self.has_permission(action='write'),
            },
        }

    async def receive_json(self, content, **kwargs):
        event = None
        match content.get('type'):
            case CollabEventType.UPDATE_KEY:
                event = await self.collab_update_key(content)
            case CollabEventType.UPDATE_TEXT:
                event = await self.collab_update_text(content)
            case CollabEventType.AWARENESS:
                event = await self.collab_update_awareness(content)
            case CollabEventType.CREATE:
                event = await self.collab_create(content)
            case CollabEventType.DELETE:
                event = await self.collab_delete(content)
            case _:
                raise ValueError(f'Invalid message type: {content.get("type")}')
        await self.send_colllab_event(event)

    def _get_object_for_update(self, path):
        if not isinstance(path, str):
            raise ValidationError('Invalid path')
        path_parts = tuple(path.split('.'))
        if len(path_parts) < 3 or not (path_parts[0] == 'sections' or (path_parts[0] == 'findings' and is_uuid(path_parts[1]))):
            raise ValidationError('Invalid path')

        if path_parts[0] == 'sections':
            obj_qs = ReportSection.objects.filter(section_id=path_parts[1])
            serializer_class = ReportSectionSerializer
        elif path_parts[0] == 'findings' and is_uuid(path_parts[1]):
            obj_qs = PentestFinding.objects.filter(finding_id=path_parts[1])
            serializer_class = PentestFindingSerializer
        else:
            raise ValidationError('Invalid path')

        obj = obj_qs \
            .filter(project_id=self.related_id) \
            .select_related('assignee', 'project__project_type') \
            .select_for_update(of=['self'], no_key=True) \
            .first()
        if not obj:
            raise ValidationError('Invalid path: ID not found')

        # Validate path in top-level or in field definition
        if path_parts[2] == 'data':
            try:
                path, _value, definition = get_field_value_and_definition(data=obj.data, definition=obj.field_definition, path=path_parts[3:])
                return obj, path_parts[2:], definition
            except KeyError as ex:
                raise ValidationError('Invalid path') from ex
        else:
            valid_paths = {k for k, f in serializer_class().fields.items() if not f.read_only}
            if len(path_parts) > 3 or path_parts[2] not in valid_paths:
                raise ValidationError('Invalid path')

            return obj, path_parts[2:], None

    def get_object_for_update(self, content):
        obj, path, definition = self._get_object_for_update(content.get('path'))
        match content.get('type'):
            case CollabEventType.UPDATE_TEXT:
                if not definition or definition.type not in [FieldDataType.MARKDOWN, FieldDataType.STRING]:
                    raise ValidationError('collab.update_text is not supported for non-text fields. Use collab.update_key instead.')
            case CollabEventType.UPDATE_KEY:
                if definition and definition.type in [FieldDataType.MARKDOWN, FieldDataType.STRING]:
                    raise ValidationError('collab.update_key is not supported for text fields. Use collab.update_text instead.')
            case CollabEventType.CREATE:
                if not definition or definition.type != FieldDataType.LIST:
                    raise ValidationError('collab.create is only supported for list fields')
            case CollabEventType.DELETE:
                if not definition:
                    raise ValidationError('collab.delete is only supported for list fields')
            case _:
                raise ValidationError('Invalid collab event type')
        return obj, path, definition

    def perform_update_text(self, obj, path, _definition, changes):
        updated_data = obj.data
        set_value_at_path(updated_data, path[1:], changes.apply(get_value_at_path(updated_data, path[1:]) or ''))
        obj.update_data(updated_data)
        obj.save()
        return obj

    def perform_update_key(self, obj, path, definition, value):
        # Update data in DB
        if definition:
            updated_data = obj.data
            set_value_at_path(updated_data, path[1:], value)
            serializer_data = {'data': updated_data}
        else:
            serializer_data = {path[0]: value}
        serializer = (ReportSectionSerializer if isinstance(obj, ReportSection) else PentestFindingSerializer)(instance=obj, data=serializer_data, partial=True)
        serializer.is_valid(raise_exception=True)
        return serializer.save()

    @database_sync_to_async
    @transaction.atomic()
    def collab_create(self, content):
        obj, path, _ = self.get_object_for_update(content)

        # Update DB
        updated_data = obj.data
        lst = get_value_at_path(updated_data, path[1:])
        lst.append(content.get('value'))
        index = len(lst) - 1
        serializer = (ReportSectionSerializer if isinstance(obj, ReportSection) else PentestFindingSerializer)(instance=obj, data={'data': updated_data}, partial=True)
        serializer.is_valid(raise_exception=True)
        with collab_context(prevent_events=True):
            obj = serializer.save()

        return CollabEvent.objects.create(
            related_id=self.related_id,
            path=f"{content['path']}.[{index}]",
            type=CollabEventType.CREATE,
            created=obj.updated,
            version=obj.updated.timestamp(),
            client_id=self.client_id,
            data={
                'value': content['value'],
            },
        )

    @database_sync_to_async
    @transaction.atomic()
    def collab_delete(self, content):
        obj, path, _ = self.get_object_for_update(content)

        updated_data = obj.data
        lst = get_value_at_path(updated_data, path[1:-1])
        if not isinstance(lst, list):
            raise ValidationError('collab.delete is only supported for list fields')
        index = int(path[-1][1:-1] if path[-1].startswith('[') and path[-1].endswith(']') else path[-1])
        if not (0 <= index < len(lst)):
            raise ValidationError('Invalid list index')
        lst.pop(index)
        serializer = (ReportSectionSerializer if isinstance(obj, ReportSection) else PentestFindingSerializer)(instance=obj, data={'data': updated_data}, partial=True)
        serializer.is_valid(raise_exception=True)
        with collab_context(prevent_events=True):
            obj = serializer.save()

        return CollabEvent.objects.create(
            related_id=self.related_id,
            path=content['path'],
            type=CollabEventType.DELETE,
            created=obj.updated,
            version=obj.updated.timestamp(),
            client_id=self.client_id,
        )


def send_collab_event_project(event: CollabEvent):
    group_name = f'project_{event.related_id}'
    layer = get_channel_layer()
    async_to_sync(layer.group_send)(group_name, {
        'type': 'collab_event',
        'id': str(event.id),
        'path': event.path,
    })


def send_collab_event_user(event: CollabEvent):
    group_name = f'user_{event.related_id}'
    layer = get_channel_layer()
    async_to_sync(layer.group_send)(group_name, {
        'type': 'collab_event',
        'id': str(event.id),
        'path': event.path,
    })
